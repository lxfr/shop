#!/usr/bin/env bash
#==================================================================================
# имя файла скрипта на всякий случай
SCRIPT="$0"
# описание работы скрипнта --help
showHelp() {
    echo "usage: ./yupe [set-env] [check-env] [check-config]"
    echo "              [build] [build-nocache] [create] [install] [update]"
    echo "              [start] [stop] [ps] [restart] [db-backup] [db-restore]"
    echo ""
    echo "description:"
    echo "      set-env           - set application environment [dev | prod | test]"
    echo "      check-env         - print message with current application environment name"
    echo "      check-config      - check current environment configuration .yml file"
    echo "      build             - build docker containers for application"
    echo "      build-nocache     - force build docker containers for application without docker cached images"
    echo "      create            - create Yupe! application in ./app directory with --no-install key, just create"
    echo "      install           - composer install --prefer-dist, + --no-dev key on prod environment"
    echo "      update            - composer update  --prefer-dist, + --no-dev key on prod environment"
    echo "      start             - start application environment"
    echo "      stop              - stop application environment"
    echo "      restart           - restart application environment"
    echo "      ps                - list of working containers in current environment"
    echo "      db-backup         - s3cli backup database to Amazon S3"
    echo "      db-restore        - s3cli restore database form Amazon S3"
    echo ""
    echo ""
    echo "Для определения в каком окружении должно работать приложение выполните: './yupe set-env [ dev | prod | test ]'"
    echo ""
    echo "See ./yupe --help to read about all commands."

}
CONTAINER_NAME=
APP_DIR=./app
COMPOSER_CREATE_APP_PATH=
COMPOSER_APP_PATH=
#COMPOSER_DEV=
# Текущее окружение
CURRENT_ENV=
#printf 123456 | md5sum | awk '{print $1}'
#echo $APP_$(printf 123456 | md5sum | awk '{print $1}')

# Определяем где запущен скрипт [Linux | Windows | MacOS]
PLATFORM='unknown'
UNAMESTR=`uname`
if [[ "$UNAMESTR" == 'Linux' ]]; then
   PLATFORM='linux'
elif [[ "$UNAMESTR" == 'MINGW64_NT-10.0' ]]; then
    PLATFORM='windows'
elif [[ "$UNAMESTR" == 'Darwin' ]]; then
   PLATFORM='mac'
fi

case "$PLATFORM" in
windows)
    COMPOSER_CREATE_APP_PATH="/$PWD"
    COMPOSER_APP_PATH="/$PWD/app"
    ;;
*)
    echo ""
    COMPOSER_CREATE_APP_PATH="$PWD"
    COMPOSER_APP_PATH="$PWD/app"
    ;;
esac

# Задаем Новое окружение [ dev | prod | test ]
NEW_ENV=
if [ ! -z $2 ]; then
    NEW_ENV="$2"
fi

# имя функции для запуска
FUNCTION=
if [ ! -z $1 ]; then
    FUNCTION="$1"
fi

# переопределяем окржение заданное по умолчанию если передали второй скрипт
#if [ ! -z $2 ]; then
#    APP_ENV="$2"
#fi
# проверка наличия приложения в папке app
check-dir(){
    if [ ! -d "$APP_DIR" ]; then
        # Control will enter here if $DIRECTORY doesn't exist.
        echo "Please, install your application to ./app folder."
        echo "To create app run command: ./yupe create"
        echo "To install/update app dependency run command: ./yupe [ install | update ]"
        exit 1
    fi
}
# проверка наличие файла со значением переменной окружения
check-env(){
    if [ ! -f ./docker/env/app_env ]; then
        echo "missing ./docker/env/app_env file, please create application environment file, use command './yupe set-env [ dev | prod | test ]'"
        exit 1
    else
        environment
    fi
}
# отображаем на экране в каком окружении работает приложение
environment(){
    CURRENT_ENV=`cat ./docker/env/app_env`
    echo "Current application environment: $CURRENT_ENV"
    case "$CURRENT_ENV" in
    prod)
#        COMPOSER_DEV=" --no-dev"
        ;;
    esac
}
# изменяем окружение в котором будет работать приложение
set-env(){
    echo "Updating application environment..."
    case "$NEW_ENV" in
    dev|prod|test)
        if [ -f ./docker/env/app_env ]; then
            CURRENT_ENV=`cat ./docker/env/app_env`
            docker-compose -f common.yml -f $CURRENT_ENV.yml down
        fi
        echo "Setting up new application environment to: $NEW_ENV"
        cp ./docker/env/$NEW_ENV/app_env ./docker/env/app_env
        echo "Success"
        check-env
        ;;
    *) #если введено с клавиатуры то, что в case не описывается, выполнять следующее:
        echo "Ошибка: Вторым параметром команды укажите в каком окружении необходимо запускать приложение dev, prod или test"
        exit 1;
    esac
}

build-nocache(){
    check-dir
    echo "Building docker images for $CURRENT_ENV environment without cache."
    docker-compose -f common.yml -f $CURRENT_ENV.yml build --no-cache
}

build(){
    check-dir
    echo "Building docker images for $CURRENT_ENV environment with cache."
    docker-compose -f common.yml -f $CURRENT_ENV.yml build
}
ps(){
    echo "Container status in $CURRENT_ENV environment:"
    docker-compose -f common.yml -f $CURRENT_ENV.yml ps
}

start(){
    check-dir
    echo "Start Yupe! in $CURRENT_ENV environment"
    docker-compose -f common.yml -f $CURRENT_ENV.yml up -d
    ps
    echo 'Please, see logs above to find out environment container status.'
}
stop(){
    check-dir
    echo "Stop Yupe! in $CURRENT_ENV environment"
    docker-compose -f common.yml -f $CURRENT_ENV.yml down
    ps
    echo 'Please, see logs above to find out environment container status.'
}
restart(){
    check-dir
    echo "Restart Yupe! in $CURRENT_ENV environment"
    docker-compose -f common.yml -f $CURRENT_ENV.yml down
    docker-compose -f common.yml -f $CURRENT_ENV.yml up -d
    ps
    echo 'Please, see logs above to find out environment container status.'
}

check-config(){
    echo "Config status in $CURRENT_ENV environment:"
    docker-compose -f common.yml -f $CURRENT_ENV.yml config
}



create(){
    if [ ! -d "$APP_DIR" ]; then
        cd $APP_DIR
        echo "Exec: git clone git clone git@github.com:ElisDN/yii2-demo-shop.git shop"
#        docker run --rm --interactive --tty --volume "$COMPOSER_CREATE_APP_PATH/app:/app:rw" --name "composer" composer create-project yupe/yupe:1.1 yupe --no-install --no-interaction
        git clone git clone git@github.com:ElisDN/yii2-demo-shop.git shop

        install


    else
        echo "Error: Can not create application in app dirrectory, it's already in app directory, app dirrectory is not empty. Please, remove ./app directory to create new app."
    fi

}

install(){
    if [ -d "$APP_DIR" ]; then
        echo "Running: composer install"
        docker run --rm --interactive --tty --volume "$COMPOSER_APP_PATH/shop:/app:rw" --name "composer" composer install --prefer-dist
    else
        create
    fi
}

update(){
    if [ -d "$APP_DIR" ]; then
        echo "Running: composer update"
        docker run --rm --interactive --tty --volume "$COMPOSER_APP_PATH/shop:/app:rw" --name "composer" composer update --lock
    else
        echo "Error: can't update, no app folder. Please, create app, run: ./yupe create"
    fi
}
db-backup(){
    echo "Backup DB to Amazon S3 cloud"
}
db-restore(){
    echo "Restore DB from Amazon S3 cloud"
}

init-xdebug(){
    if [ ! -f ./docker/env/dev/XDEBUG_CONFIG.env ]; then
        touch ./docker/env/dev/XDEBUG_CONFIG.env
        case "$PLATFORM" in
        windows)

            echo "XDEBUG_CONFIG=remote_host=10.0.75.1" >> ./docker/env/dev/XDEBUG_CONFIG.env
            ;;
        *)
            echo "XDEBUG_CONFIG=remote_host=172.17.0.1" >> ./docker/env/dev/XDEBUG_CONFIG.env
            ;;
        esac
    fi

    if [ ! -f ./docker/env/test/XDEBUG_CONFIG.env ]; then
        touch ./docker/env/test/XDEBUG_CONFIG.env
        case "$PLATFORM" in
        windows)

            echo "XDEBUG_CONFIG=remote_host=10.0.75.1" >> ./docker/env/test/XDEBUG_CONFIG.env
            ;;
        *)
            echo "XDEBUG_CONFIG=remote_host=172.17.0.1" >> ./docker/env/test/XDEBUG_CONFIG.env
            ;;
        esac
    fi


}
#echo "/$PWD"
#exit 0
case "$1" in
-h|--help)
    showHelp
    ;;
check-env|environment)
    check-env
    ;;
set-env)
    set-env
    ;;
self-destroy)
    self-destroy
    ;;
*)
    if [ ! -z $(type -t $FUNCTION | grep function) ]; then
        init-xdebug
        check-env
        $1
    else
        showHelp
    fi
esac
